{"/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/test.js":"/* istanbul instrument in package npmtest_eslint_plugin_lodash_fp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/lib.npmtest_eslint_plugin_lodash_fp.js":"/* istanbul instrument in package npmtest_eslint_plugin_lodash_fp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_plugin_lodash_fp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_plugin_lodash_fp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-plugin-lodash-fp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_plugin_lodash_fp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_plugin_lodash_fp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_plugin_lodash_fp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eslint_plugin_lodash_fp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_plugin_lodash_fp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eslint_plugin_lodash_fp.__dirname + '/lib.npmtest_eslint_plugin_lodash_fp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/index.js":"'use strict';\n\nconst reqAll = require('req-all');\nconst createIndex = require('create-eslint-index');\n\nconst rules = reqAll('rules', {camelize: false});\n\nconst recommendedRules = createIndex.createConfig({\n  plugin: 'lodash-fp',\n  field: 'meta.docs.recommended'\n}, rules);\n\nmodule.exports = {\n  rules,\n  configs: {\n    recommended: {\n      rules: recommendedRules\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/consistent-compose.js":"'use strict';\n\nconst enhance = require('./core/enhance');\nconst constants = require('./core/constants');\n\nconst create = function (context) {\n  const info = enhance();\n  const composeMethod = context.options[0];\n  if (!composeMethod) {\n    return {};\n  }\n\n  return info.merge({\n    CallExpression: function (node) {\n      const method = info.helpers.isComposeMethod(node);\n      if (method && method.name !== composeMethod) {\n        context.report(node, `Forbidden use of \\`${method.name}\\`. Use \\`${composeMethod}\\` instead`);\n      }\n    }\n  });\n};\n\nconst schema = [{\n  type: 'string',\n  enum: constants.COMPOSITION_METHODS\n}];\n\nmodule.exports = {\n  create,\n  meta: {\n    schema,\n    docs: {\n      description: 'Enforce a consistent composition method.',\n      recommended: 'off'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/core/enhance.js":"'use strict';\n\nconst enhance = require('enhance-visitors');\nconst astUtils = require('eslint-ast-utils');\nconst lodashUtil = require('./lodash-util');\n\nfunction isLodashModule(name) {\n  return name.indexOf('lodash') === 0;\n}\n\nfunction stripLodash(name) {\n  const lodashPath = 'lodash/';\n  return name.slice(lodashPath.length);\n}\n\nfunction strippedModuleName(strippedName, name) {\n  if (strippedName === 'fp') {\n    return 'fp/' + name;\n  }\n  return name;\n}\n\nmodule.exports = function () {\n  const imports = {};\n\n  // `ImportDeclaration` and `VariableDeclarator` will find Lodash imports and require()\n  // and fill `imports` with what is found\n  // The result is a collection of identifier and (method or Lodash) pairs\n  const predefinedRules = {\n    ImportDeclaration: function (node) {\n      const name = node.source.value;\n      if (isLodashModule(name)) {\n        const strippedName = stripLodash(name);\n        node.specifiers.forEach(function (specifier) {\n          if (specifier.type === 'ImportDefaultSpecifier') {\n            // `import _ from 'lodash';` --> {'_': ''}\n            // `import _ from 'lodash/fp';` --> {'_': 'fp'}\n            // `import find from 'lodash/find';` --> {'find': 'find'}\n            // `import find from 'lodash/fp/find';` --> {'find': 'fp/find'}\n            imports[specifier.local.name] = strippedName;\n          } else if (specifier.type === 'ImportSpecifier') {\n            // `import {find, invoke as i} from 'lodash';` --> {'find': 'find', 'i': 'invoke'}\n            // `import {find, invoke as i} from 'lodash/fp';` --> {'find': 'fp/find', 'i': 'fp/invoke'}\n            imports[specifier.local.name] = strippedModuleName(strippedName, specifier.imported.name);\n          }\n        });\n      }\n    },\n    VariableDeclarator: function (node) {\n      if (node.init && astUtils.isStaticRequire(node.init)) {\n        const name = node.init.arguments[0].value;\n        if (isLodashModule(name)) {\n          const strippedName = stripLodash(name);\n          if (node.id.type === 'Identifier') {\n            // `const _ = require('lodash');` --> {'_': ''}\n            // `const _ = require('lodash/fp');` --> {'_': 'fp'}\n            // `const find = require('lodash/find');` --> {'find': 'find'}\n            // `const find = require('lodash/fp/find');` --> {'find': 'fp/find'}\n            imports[node.id.name] = strippedName;\n          } else if (node.id.type === 'ObjectPattern') {\n            node.id.properties.forEach(function (prop) {\n              // `const {find, invoke: i} = require('lodash');` --> {'find': 'find', 'i': 'invoke'}\n              // `const {find, invoke: i} = require('lodash/fp');` --> {'find': 'fp/find', 'i': 'fp/invoke'}\n              imports[prop.key.name] = strippedModuleName(strippedName, prop.value.name);\n            });\n          }\n        }\n      }\n    }\n  };\n\n  return {\n    imports,\n    helpers: lodashUtil(imports),\n    merge: customHandlers => enhance.mergeVisitors([predefinedRules, customHandlers])\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/core/lodash-util.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst data = require('./lodash-data');\nconst constants = require('./constants');\n\nmodule.exports = function (imports) {\n  const isIdentifier = _.matches({type: 'Identifier'});\n  const isCallExpression = _.matches({type: 'CallExpression'});\n  const isMemberExpression = _.matches({type: 'MemberExpression'});\n\n  function buildInfo(info) {\n    if (!info.name) {\n      return false;\n    }\n\n    const name = info.name.replace('fp/', '');\n    const realName = data.aliasToReal[name] || name;\n\n    return {\n      name,\n      realName,\n      node: info.node,\n      varname: info.varname || info.name,\n      skipFixed: data.skipFixed[realName] || false,\n      ary: data.ary[realName] && _.parseInt(10, data.ary[realName]),\n      iterateePos: data.iterateePos[realName],\n      iterateeAry: data.iterateeAry[realName],\n      spread: data.methodSpread[realName]\n    };\n  }\n\n  // Is X the Lodash object?\n\n  function isLodash(id) {\n    return imports[id] === 'fp';\n  }\n\n  function isVanillaLodash(id) {\n    return imports[id] === '';\n  }\n\n  const isAnyLodash = _.overSome([isLodash, isVanillaLodash]);\n\n  // Is `X()` or `X.Y()` a Lodash method call()?\n\n  const findName = _.curry(function (methods, method) {\n    return _.find(_.eq(method.name), _.isArray(methods) ? methods : [methods]) && method;\n  });\n\n  function isMemberMethod(node) {\n    return isMemberExpression(node) &&\n      isLodash(node.object.name) &&\n      buildInfo({\n        node,\n        name: node.property.name\n      });\n  }\n\n  function isAnyMemberMethod(node) {\n    return isMemberExpression(node) &&\n      isAnyLodash(node.object.name) &&\n      buildInfo({\n        node,\n        name: node.property.name\n      });\n  }\n\n  function isIdentifierMethod(node) {\n    return isIdentifier(node) &&\n      imports[node.name] !== undefined &&\n      buildInfo({\n        node,\n        varname: node.name,\n        name: imports[node.name]\n      });\n  }\n\n  function isMethod(node) {\n    return isMemberMethod(node) || isIdentifierMethod(node);\n  }\n\n  function isAnyMethod(node) {\n    return isAnyMemberMethod(node) || isIdentifierMethod(node);\n  }\n\n  const isMethodOf = _.curry(function (methods, node) {\n    const method = isMethod(node);\n    return method && findName(methods, method);\n  });\n\n  const isAnyMethodOf = _.curry(function (methods, node) {\n    const method = isAnyMethod(node);\n    return method && findName(methods, method);\n  });\n\n  function isMethodCall(node) {\n    return isCallExpression(node) && isMethod(node.callee);\n  }\n\n  const isMethodCallOf = _.curry(function (methods, node) {\n    const method = isMethodCall(node);\n    return method && findName(methods, method);\n  });\n\n  // Is `X.Y` a Lodash method?\n  const isMember = _.curry(function (node) {\n    return isMemberExpression(node) &&\n      isIdentifier(node.object) &&\n      isIdentifier(node.property) &&\n      isLodash(node.object.name) &&\n      buildInfo({\n        node,\n        name: node.property.name\n      });\n  });\n\n  const getComposeMethodArgMethods = _.curry(function (name, node) {\n    const methodNames = node.arguments.map(function (arg) {\n      return isMethodCall(arg) || isMember(arg);\n    });\n    if (name === 'flowRight' || name === 'compose') {\n      return _.reverse(methodNames);\n    }\n    return methodNames;\n  });\n\n  return {\n    isIdentifier,\n    isCallExpression,\n    isMemberExpression,\n\n    isAnyLodash,\n    isLodash,\n    isVanillaLodash,\n\n    isMethodCall,\n    isMethodCallOf,\n\n    isMethod,\n    isMethodOf,\n    isAnyMethodOf,\n\n    isComposeMethod: isMethodCallOf(constants.COMPOSITION_METHODS),\n    isForEachMethod: isMethodCallOf(constants.FOREACH_METHODS),\n    getComposeMethodArgMethods\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/core/lodash-data.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst mapping = require('lodash/fp/_mapping');\n\nfunction methodArities() {\n  return _.keys(mapping.aryMethod)\n    .map(_.parseInt(10))\n    .reduce(function (res, n) {\n      mapping.aryMethod[n].forEach(function (name) {\n        res[name] = n;\n      });\n      return res;\n    }, {});\n}\n\nconst ary = methodArities();\n\nfunction iterateePos() {\n  return _.keys(mapping.iterateeAry)\n    .reduce(function (res, name) {\n      const methodAry = ary[name];\n      const rearg = mapping.methodRearg[name] || mapping.aryRearg[methodAry];\n      res[name] = rearg[1];\n      return res;\n    }, {});\n}\n\nmodule.exports = _.assign({\n  ary,\n  iterateePos: iterateePos()\n}, mapping);\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/core/constants.js":"'use strict';\n\nconst COMPOSITION_METHODS = ['compose', 'flow', 'flowRight', 'pipe'];\nconst FOREACH_METHODS = ['forEach', 'forEachRight', 'each', 'eachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight'];\nconst SIDE_EFFECT_METHODS = FOREACH_METHODS.concat(['bindAll']);\n\nmodule.exports = {\n  COMPOSITION_METHODS,\n  FOREACH_METHODS,\n  SIDE_EFFECT_METHODS\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/consistent-name.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst astUtils = require('eslint-ast-utils');\nconst enhance = require('./core/enhance');\n\nfunction isLodash(name) {\n  return name === 'lodash' || name === 'lodash/fp';\n}\n\nfunction hasDefaultSpecifier(node) {\n  return node.specifiers.some(function (specifier) {\n    return specifier.type === 'ImportDefaultSpecifier';\n  });\n}\n\n/* eslint quote-props: [2, \"as-needed\"] */\nconst create = function (context) {\n  const info = enhance();\n  const expectedName = context.options[0] || '_';\n  let importNode = null;\n\n  return info.merge({\n    ImportDeclaration: function (node) {\n      if (isLodash(node.source.value) && hasDefaultSpecifier(node)) {\n        importNode = node;\n      }\n    },\n    VariableDeclarator: function (node) {\n      if (node.init && astUtils.isStaticRequire(node.init)) {\n        if (isLodash(node.init.arguments[0].value)) {\n          importNode = node;\n        }\n      }\n    },\n    'Program:exit': function () {\n      const importValues = _.values(info.imports);\n      if (// `lodash`/`lodash/fp` was imported\n        (importValues.indexOf('') !== -1 || importValues.indexOf('fp') !== -1) &&\n        // but <expectedName> does not refer to either `lodash` or `lodash/fp`\n        !info.helpers.isAnyLodash(expectedName)\n      ) {\n        context.report(importNode, `Lodash should be imported as \\`${expectedName}\\``);\n      }\n    }\n  });\n};\n\nconst schema = [{\n  type: 'string'\n}];\n\nmodule.exports = {\n  create,\n  meta: {\n    schema,\n    docs: {\n      description: 'Enforce a consistent name for Lodash.',\n      recommended: ['error', '_']\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-argumentless-calls.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst enhance = require('./core/enhance');\n\nconst exceptions = ['uniqueId', 'now', 'noConflict', 'runInContext'];\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    CallExpression: function (node) {\n      if (node.arguments.length !== 0) {\n        return;\n      }\n      const method = info.helpers.isMethodCall(node);\n      if (method && !_.includes(method.name, exceptions)) {\n        context.report(node, 'No call without arguments');\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Forbid argument-less calls of Lodash methods.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-chain.js":"'use strict';\n\nconst enhance = require('./core/enhance');\n\nfunction isLodashWrap(helpers, node) {\n  return node.type === 'Identifier' &&\n    helpers.isAnyLodash(node.name);\n}\n\nconst create = function (context) {\n  const info = enhance();\n  const helpers = info.helpers;\n\n  return info.merge({\n    CallExpression: function (node) {\n      const callee = node.callee;\n      if (isLodashWrap(helpers, callee) || info.helpers.isAnyMethodOf('chain', callee)) {\n        context.report(node, 'Unallowed use of chain operations. Use flow/compose instead');\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Forbid the use of [`_.chain`](https://lodash.com/docs#chain)',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-extraneous-args.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst enhance = require('./core/enhance');\nconst data = require('./core/lodash-data');\n\nfunction reportMessage(method, alternative) {\n  const baseMessage = `\\`${method.name}\\` is capped at ${method.ary} arguments`;\n  if (alternative) {\n    return `${baseMessage}. Did you mean to use \\`${alternative}\\`?`;\n  }\n  if (method.spread) {\n    return `${baseMessage} and takes an array as its last argument.`;\n  }\n  return `${baseMessage}.`;\n}\n\nfunction getAlternative(method, nArgs) {\n  const alternative = _.findKey(_.eq(method.realName), data.remap);\n  if (alternative && data.ary[alternative] <= nArgs) {\n    return alternative;\n  }\n  return false;\n}\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    CallExpression: function (node) {\n      const method = info.helpers.isMethodCall(node);\n\n      if (method && !method.skipFixed && node.arguments.length > method.ary) {\n        const alternative = getAlternative(method, node.arguments.length);\n        context.report(node, reportMessage(method, alternative));\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'No extraneous arguments to methods with a fixed arity.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-extraneous-function-wrapping.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst astUtils = require('eslint-ast-utils');\nconst enhance = require('./core/enhance');\n\nconst isFunction = _.flow(\n  _.get('type'),\n  _.includes(_, ['FunctionExpression', 'FunctionDeclaration', 'ArrowFunctionExpression'])\n);\n\nfunction hasSingleIdentifierParam(node) {\n  return node.params.length === 1 &&\n    node.params[0].type === 'Identifier';\n}\n\nfunction isExtraneous(info, argNode) {\n  const canBeExtraneous = isFunction(argNode) && hasSingleIdentifierParam(argNode);\n  if (!canBeExtraneous) {\n    return false;\n  }\n  const lastArgName = argNode.params[0].name;\n  let callExpression;\n  if (argNode.body.type === 'BlockStatement') {\n    const body = argNode.body.body;\n    if (body.length !== 1 || body[0].type !== 'ReturnStatement' || body[0].argument === null) {\n      return false;\n    }\n    callExpression = body[0].argument;\n  } else {\n    callExpression = argNode.body;\n  }\n\n  // If <SOMETHING> is not a call expression\n  if (callExpression.type !== 'CallExpression' ||\n    // or if `lastArgName` is used somewhere else in the function\n    astUtils.containsIdentifier(lastArgName, callExpression.callee) ||\n    // or in `lastArgName` is used among the other arguments\n    astUtils.someContainIdentifier(lastArgName, _.initial(callExpression.arguments))\n  ) {\n    return false;\n  }\n\n  const method = info.helpers.isMethodCall(callExpression);\n  if (!method && callExpression.callee.type !== 'CallExpression') {\n    return false;\n  }\n\n  if (method.skipFixed) {\n    // If it's a lodash method that is not curried\n    return false;\n  }\n  const calleeArgs = callExpression.arguments;\n  const lastCalleeArg = calleeArgs[calleeArgs.length - 1];\n  return lastCalleeArg &&\n    lastCalleeArg.type === 'Identifier' &&\n    lastCalleeArg.name === lastArgName;\n}\n\nconst errorMessage = 'Found extraneous function wrap around curried method. Pass inner function directly';\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    FunctionDeclaration: function (node) {\n      if (isExtraneous(info, node)) {\n        context.report(node, errorMessage);\n      }\n    },\n    CallExpression: function (node) {\n      node.arguments\n        .filter(function (argNode) {\n          return isExtraneous(info, argNode);\n        })\n        .forEach(function (arg) {\n          context.report(arg, errorMessage);\n        });\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Avoid unnecessary function wrapping.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-extraneous-iteratee-args.js":"'use strict';\n\nconst enhance = require('./core/enhance');\nconst astUtil = require('./core/ast-util');\n\nfunction getFunctionArgumentsLength(node) {\n  if (!node || !astUtil.isFunction(node)) {\n    return false;\n  }\n\n  return node.params.length;\n}\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    CallExpression: function (node) {\n      const method = info.helpers.isMethodCall(node);\n      if (!method) {\n        return;\n      }\n\n      const nArgs = getFunctionArgumentsLength(node.arguments[method.iterateePos]);\n      if (nArgs > method.iterateeAry) {\n        context.report(node,\n          `Too many parameters in \\`${method.name}\\`'s iteratee, it is only given ` +\n          `${method.iterateeAry} argument${method.iterateeAry === 1 ? '' : 's'}.`);\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'No extraneous parameters in iteratees.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/core/ast-util.js":"'use strict';\nconst _ = require('lodash/fp');\n\n/**\n * Returns whether the node is a function declaration that has a block\n * @param {Object} node\n * @returns {boolean}\n */\nconst isFunctionDefinitionWithBlock = _.overSome([\n  _.matchesProperty('type', 'FunctionExpression'),\n  _.matchesProperty('type', 'FunctionDeclaration'),\n  _.matches({type: 'ArrowFunctionExpression', body: {type: 'BlockStatement'}})\n]);\n\n/**\n * If the node specified is a function, returns the node corresponding with the first statement/expression in that function\n * @param {Object} node\n * @returns {node|undefined}\n */\nconst getFirstFunctionLine = _.cond([\n    [isFunctionDefinitionWithBlock, _.property(['body', 'body', 0])],\n    [_.matches({type: 'ArrowFunctionExpression'}), _.property('body')]\n]);\n\n/**\n * Returns whether or not the expression is a return statement\n * @param {Object} exp\n * @returns {boolean|undefined}\n */\nconst isReturnStatement = _.matchesProperty('type', 'ReturnStatement');\n\n/**\n * Returns the node of the value returned in the first line, if any\n * @param {Object} func\n * @returns {Object|null}\n */\nfunction getValueReturnedInFirstLine(func) {\n  const firstLine = getFirstFunctionLine(func);\n  if (func) {\n    if (isFunctionDefinitionWithBlock(func)) {\n      return isReturnStatement(firstLine) ? firstLine.argument : null;\n    }\n    if (func.type === 'ArrowFunctionExpression') {\n      return firstLine;\n    }\n  }\n  return null;\n}\n\n/**\n * Returns whether the node is actually computed (x['ab'] does not count, x['a' + 'b'] does\n * @param {Object} node\n * @returns {boolean|undefined}\n */\nfunction isComputed(node) {\n  return _.get('computed', node) && node.property.type !== 'Literal';\n}\n\n/**\n * Returns whether the two expressions refer to the same object (e.g. a['b'].c and a.b.c)\n * @param {Object} a\n * @param {Object} b\n * @returns {boolean}\n */\nfunction isEquivalentExp(a, b) {\n  return _.isEqualWith(function (left, right, key) {\n    if (_.includes(key, ['loc', 'range', 'computed', 'start', 'end'])) {\n      return true;\n    }\n    if (isComputed(left) || isComputed(right)) {\n      return false;\n    }\n    if (key === 'property') {\n      const leftValue = left.name || left.value;\n      const rightValue = right.name || right.value;\n      return leftValue === rightValue;\n    }\n  }, a, b);\n}\n\n/**\n * Returns whether the expression is a strict equality comparison, ===\n * @param {Object} node\n * @returns {boolean}\n */\nconst isEqEqEq = _.matches({type: 'BinaryExpression', operator: '==='});\n\nconst isFunction = _.flow(\n  _.get('type'),\n  _.includes(_, ['FunctionExpression', 'FunctionDeclaration', 'ArrowFunctionExpression'])\n);\n\nfunction isIdentityFunction(node) {\n  if (!isFunction(node) || node.params.length !== 1 || !node.body) {\n    return false;\n  }\n  let returnedElement;\n  if (node.body.type === 'BlockStatement') {\n    const subBody = node.body.body;\n    if (subBody.length !== 1 || subBody[0].type !== 'ReturnStatement') {\n      return false;\n    }\n    returnedElement = subBody[0].argument;\n  } else {\n    returnedElement = node.body;\n  }\n\n  return returnedElement.type === 'Identifier' &&\n    returnedElement.name === node.params[0].name;\n}\n\nmodule.exports = {\n  getValueReturnedInFirstLine,\n  isComputed,\n  isEquivalentExp,\n  isEqEqEq,\n  isFunction,\n  isIdentityFunction\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-for-each.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst enhance = require('./core/enhance');\n\nconst isForEachCall = _.matches({type: 'MemberExpression', property: {name: 'forEach'}});\n\nconst create = function (context) {\n  const info = enhance();\n  const options = context.options[0] || {};\n  const noNative = options.noNative !== false;\n\n  return info.merge({\n    CallExpression: function (node) {\n      const method = info.helpers.isForEachMethod(node);\n      if (method) {\n        context.report(node, `Forbidden use of \\`_.${method.realName}\\``);\n        return;\n      }\n\n      if (noNative && isForEachCall(node.callee)) {\n        context.report(node, 'Forbidden use of native `forEach`');\n      }\n    }\n  });\n};\n\nconst schema = [\n  {\n    type: 'object',\n    properties: {\n      noNative: {\n        type: 'boolean'\n      }\n    }\n  }\n];\n\nmodule.exports = {\n  create,\n  meta: {\n    schema,\n    docs: {\n      description: ' Forbid the use of [`_.forEach`](https://lodash.com/docs#forEach)',\n      recommended: 'off'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-partial-of-curried.js":"'use strict';\n\nconst enhance = require('./core/enhance');\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    CallExpression: function (node) {\n      const method = info.helpers.isMethodCallOf(['partial', 'partialRight'], node);\n      if (!method || node.arguments.length === 0) {\n        return;\n      }\n\n      const func = info.helpers.isMethod(node.arguments[0]) || info.helpers.isMethodCall(node.arguments[0]);\n      if (func && !func.skipFixed) {\n        context.report(node, `Don't use partial on a curried method`);\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'No use of [`_.partial`](https://lodash.com/docs#partial) on curried Lodash methods.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-single-composition.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst enhance = require('./core/enhance');\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    CallExpression: function (node) {\n      const method = info.helpers.isComposeMethod(node);\n      if (!method || node.arguments.length > 1 || _.get([0, 'type'], node.arguments) === 'SpreadElement') {\n        return;\n      }\n\n      // _.flow accepts array of Functions, check that we have more than one Function\n      const isArrayExpression = _.get([0, 'type'], node.arguments) === 'ArrayExpression';\n      if (isArrayExpression && _.get([0, 'elements', 'length'], node.arguments) > 1) {\n        return;\n      }\n\n      context.report({\n        node,\n        message: `\\`${method.name}\\` should have at least two ${isArrayExpression ? 'functions' : 'arguments'}`\n      });\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Enforce at least two methods arguments for composition methods.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-submodule-destructuring.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst astUtils = require('eslint-ast-utils');\nconst enhance = require('./core/enhance');\n\nconst isImportSpecifier = _.matches({type: 'ImportSpecifier'});\nconst isObjectPattern = _.matches({type: 'ObjectPattern'});\n\nconst errorMessage = 'Import of Lodash submodule should not be destructured';\n\nfunction isLodashSubModule(source) {\n  return _.startsWith('lodash/', source) && source !== 'lodash/fp';\n}\n\nfunction isRequireOfLodashSubModule(node) {\n  return astUtils.isStaticRequire(node) &&\n    node.arguments.length > 0 &&\n    isLodashSubModule(node.arguments[0].value);\n}\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    ImportDeclaration: function (node) {\n      if (isLodashSubModule(node.source.value)) {\n        const importSpecifier = _.find(isImportSpecifier, node.specifiers);\n        if (importSpecifier) {\n          context.report(importSpecifier, errorMessage);\n        }\n      }\n    },\n    VariableDeclarator: function (node) {\n      if (node.init && isObjectPattern(node.id) && isRequireOfLodashSubModule(node.init)) {\n        context.report(node.init, errorMessage);\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Forbid destructuring of Lodash submodules.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/no-unused-result.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst enhance = require('./core/enhance');\nconst constants = require('./core/constants');\n\nconst isForEach = _.flow(\n  _.get('realName'),\n  _.includes(_, constants.SIDE_EFFECT_METHODS)\n);\n\nfunction isMethodCall(info, node) {\n  const method = info.helpers.isMethodCall(node);\n  if (method) {\n    return method;\n  }\n  if (info.helpers.isCallExpression(node.callee)) {\n    return isMethodCall(info, node.callee);\n  }\n  return false;\n}\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    ExpressionStatement: function (node) {\n      const method = isMethodCall(info, node.expression);\n      if (method && !isForEach(method)) {\n        context.report(node, 'Unused expression');\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Enforce that the result of a Lodash method call gets used.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/prefer-compact.js":"'use strict';\n\nconst enhance = require('./core/enhance');\nconst astUtil = require('./core/ast-util');\n\nconst create = function (context) {\n  const info = enhance();\n\n  const isFilterCall = info.helpers.isMethodCallOf('filter');\n\n  function isIdentity(node) {\n    return info.helpers.isMethodOf('identity', node) ||\n      astUtil.isIdentityFunction(node);\n  }\n\n  function isFilterWithIdentity(node) {\n    return isFilterCall(node) && isIdentity(node.arguments[0]);\n  }\n\n  return info.merge({\n    CallExpression: function (node) {\n      if (isFilterWithIdentity(node)) {\n        context.report(node, 'Prefer `_.compact` over `_.filter` with identity function');\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Prefer [`_.compact`](https://lodash.com/docs#compact) over [`_.filter`](https://lodash.com/docs#filter) with identity function.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/prefer-composition-grouping.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst enhance = require('./core/enhance');\n\nconst realName = _.property('realName');\nconst groupableMethods = ['map', 'filter', 'reject'];\n\nfunction consecutiveOperations(methods) {\n  const names = _.map(realName, methods);\n  const index = _.findIndex(_.includes(_, groupableMethods), names);\n  if (index === -1) {\n    return [];\n  }\n  let operations = [];\n  if (realName(methods[index]) === realName(methods[index + 1])) {\n    operations = [methods[index + 1]];\n  }\n  return operations.concat(consecutiveOperations(methods.slice(index + 1)));\n}\n\nfunction errorMessage(operation) {\n  const baseMessage = `Prefer regrouping successive calls of \\`${operation.name}\\` into one function or function call`;\n  const name = realName(operation);\n  if (name === 'map') {\n    return baseMessage;\n  }\n  const suggestedMethod = name === 'filter' ? 'overEvery' : 'overSome';\n  return `${baseMessage}. You might want to use \\`${suggestedMethod}\\``;\n}\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    CallExpression: function (node) {\n      const method = info.helpers.isComposeMethod(node);\n      if (!method) {\n        return;\n      }\n      const methods = info.helpers.getComposeMethodArgMethods(method.name, node);\n      consecutiveOperations(methods).forEach(function (operation) {\n        context.report(node, errorMessage(operation));\n      });\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Prefer grouping similar methods in composition methods.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/prefer-constant.js":"'use strict';\n\nconst astUtil = require('./core/ast-util');\n\nconst create = function (context) {\n  const options = context.options[0] || {};\n  const shouldCheckArrowFunctions = options.arrowFunctions === true;\n\n  function isCompletelyLiteral(node) {\n    switch (node.type) {\n      case 'Literal':\n        return true;\n      case 'BinaryExpression':\n        return isCompletelyLiteral(node.left) && isCompletelyLiteral(node.right);\n      case 'UnaryExpression':\n        return isCompletelyLiteral(node.argument);\n      case 'ConditionalExpression':\n        return isCompletelyLiteral(node.test) && isCompletelyLiteral(node.consequent) && isCompletelyLiteral(node.alternate);\n      default:\n        return false;\n    }\n  }\n\n  function handleFunctionExpression(node) {\n    const valueReturnedInFirstLine = astUtil.getValueReturnedInFirstLine(node);\n    if (valueReturnedInFirstLine && isCompletelyLiteral(valueReturnedInFirstLine)) {\n      context.report(node, 'Prefer `_.constant` over a function returning a literal');\n    }\n  }\n\n  return {\n    FunctionExpression: handleFunctionExpression,\n    FunctionDeclaration: handleFunctionExpression,\n    ArrowFunctionExpression: function (node) {\n      if (shouldCheckArrowFunctions) {\n        handleFunctionExpression(node);\n      }\n    }\n  };\n};\n\nconst schema = [\n  {\n    type: 'object',\n    properties: {\n      arrowFunctions: {\n        type: 'boolean'\n      }\n    }\n  }\n];\n\nmodule.exports = {\n  create,\n  meta: {\n    schema,\n    docs: {\n      description: 'Prefer [`_.constant`](https://lodash.com/docs#constant) over functions returning literals.',\n      recommended: ['error', {arrowFunctions: false}]\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/prefer-flat-map.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst enhance = require('./core/enhance');\n\nfunction findIndexByName(name) {\n  return _.findIndex(_.eq(name));\n}\n\nconst findIndexOfMap = findIndexByName('map');\nconst findIndexOfFlatten = findIndexByName('flatten');\n\nfunction hasConsecutiveMapAndFlatten(methods) {\n  const mapIndex = findIndexOfMap(methods);\n  if (mapIndex === -1) {\n    return false;\n  }\n  const flattenIndex = findIndexOfFlatten(methods);\n  if (mapIndex === flattenIndex - 1) {\n    return true;\n  }\n  return hasConsecutiveMapAndFlatten(methods.slice(mapIndex + 1));\n}\n\nconst create = function (context) {\n  const info = enhance();\n\n  const isFlattenCall = info.helpers.isMethodCallOf('flatten');\n  const isMapCall = info.helpers.isMethodCallOf('map');\n\n  function isDirectCall(node) {\n    return isFlattenCall(node) && isMapCall(node.arguments[0]);\n  }\n\n  function isCompositionCall(info, node) {\n    const composeMethod = info.helpers.isComposeMethod(node);\n    if (!composeMethod) {\n      return composeMethod;\n    }\n\n    const methods = info.helpers.getComposeMethodArgMethods(composeMethod.name, node);\n    return hasConsecutiveMapAndFlatten(_.map('name', methods));\n  }\n\n  return info.merge({\n    CallExpression: function (node) {\n      if (isDirectCall(node) || isCompositionCall(info, node)) {\n        context.report(node, 'Prefer `_.flatMap` over consecutive `_.map` and `_.flatten`');\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Prefer [`_.flatMap`](https://lodash.com/docs#flatMap) over consecutive [`_.map`](https://lodash.com/docs#map) and [`_.flatten`](https://lodash.com/docs#flatten).',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/prefer-get.js":"'use strict';\n\nconst astUtil = require('./core/ast-util');\n\nfunction shouldCheckDeeper(node, nodeRight, toCompare) {\n  return node.operator === '&&' &&\n    nodeRight &&\n    nodeRight.type === 'MemberExpression' &&\n    !astUtil.isComputed(nodeRight) &&\n    (!toCompare || astUtil.isEquivalentExp(nodeRight, toCompare));\n}\n\nconst create = function (context) {\n  const DEFAULT_LENGTH = 3;\n  const ruleDepth = parseInt(context.options[0], 10) || DEFAULT_LENGTH;\n\n  const expStates = [];\n  function getState() {\n    return expStates[expStates.length - 1] || {depth: 0};\n  }\n\n  /* eslint quote-props: [2, \"as-needed\"] */\n  return {\n    LogicalExpression: function (node) {\n      const state = getState();\n      const rightMemberExp = astUtil.isEqEqEq(node.right) && state.depth === 0 ? node.right.left : node.right;\n\n      if (shouldCheckDeeper(node, rightMemberExp, state.node)) {\n        expStates.push({depth: state.depth + 1, node: rightMemberExp.object});\n        if (astUtil.isEquivalentExp(node.left, rightMemberExp.object) && state.depth >= ruleDepth - 2) {\n          context.report(node, 'Prefer `_.get` or `_.has` over an `&&` chain');\n        }\n      }\n    },\n    'LogicalExpression:exit': function (node) {\n      const state = getState();\n      if (state && state.node === node.right.object) {\n        expStates.pop();\n      }\n    }\n  };\n};\n\nconst schema = [\n  {\n    type: 'integer',\n    minimum: 2\n  }\n];\n\nmodule.exports = {\n  create,\n  meta: {\n    schema,\n    docs: {\n      description: 'Prefer [`_.get`](https://lodash.com/docs#get) over multiple `&&`.',\n      recommended: 'error'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/prefer-identity.js":"'use strict';\n\nconst astUtil = require('./core/ast-util');\n\nconst create = function (context) {\n  const options = context.options[0] || {};\n  const shouldCheckArrowFunctions = options.arrowFunctions === true;\n\n  function handleFunctionExpression(node) {\n    if (astUtil.isIdentityFunction(node)) {\n      context.report(node, 'Prefer `_.identity` over a function returning its argument');\n    }\n  }\n\n  return {\n    FunctionExpression: handleFunctionExpression,\n    FunctionDeclaration: handleFunctionExpression,\n    ArrowFunctionExpression: function (node) {\n      if (shouldCheckArrowFunctions) {\n        handleFunctionExpression(node);\n      }\n    }\n  };\n};\n\nconst schema = [\n  {\n    type: 'object',\n    properties: {\n      arrowFunctions: {\n        type: 'boolean'\n      }\n    }\n  }\n];\n\nmodule.exports = {\n  create,\n  meta: {\n    schema,\n    docs: {\n      description: 'Prefer [`_.identity`](https://lodash.com/docs#identity) over functions returning their argument.',\n      recommended: ['error', {arrowFunctions: false}]\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/preferred-alias.js":"'use strict';\n\nconst _ = require('lodash/fp');\nconst data = require('./core/lodash-data');\nconst enhance = require('./core/enhance');\n\nfunction checkOverrides(overrides) {\n  overrides.map(function (override) {\n    return {\n      override: override,\n      target: data.aliasToReal[override] || override\n    };\n  }).reduce(function (res, item) {\n    if (res[item.target]) {\n      throw new Error(`\\`override\\` contains \\`${res[item.target]}\\` and \\`${item.override}\\` that target \\`${item.target}\\``);\n    }\n    res[item.target] = item.override;\n    return res;\n  }, {});\n}\n\nfunction wantedAlias(overrides, method) {\n  return _.intersection(data.realToAlias[method.realName], overrides)[0] || method.realName;\n}\n\nconst create = function (context) {\n  const options = context.options[0] || {};\n  const overrides = options.overrides || [];\n  checkOverrides(overrides);\n  const info = enhance();\n\n  return info.merge({\n    CallExpression: function (node) {\n      const method = info.helpers.isMethodCall(node);\n      if (!method) {\n        return;\n      }\n      const alias = wantedAlias(overrides, method);\n      if (alias !== method.name) {\n        context.report(node, `Use \\`${alias}\\` instead of \\`${method.name}\\`.`);\n      }\n    }\n  });\n};\n\nconst schema = [\n  {\n    type: 'object',\n    properties: {\n      overrides: {\n        type: 'array',\n        uniqueItems: true,\n        items: {\n          type: 'string'\n        }\n      }\n    }\n  }\n];\n\nmodule.exports = {\n  create,\n  meta: {\n    schema,\n    docs: {\n      description: 'Limit the use of aliases.',\n      recommended: 'off'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-lodash-fp/node_modules/eslint-plugin-lodash-fp/rules/use-fp.js":"'use strict';\n\nconst astUtils = require('eslint-ast-utils');\nconst enhance = require('./core/enhance');\n\nconst lodashRegex = /^lodash($|\\/(?!fp))/;\n\nfunction reportIfLodashButNotFp(context, node, name) {\n  if (lodashRegex.test(name)) {\n    context.report(node, 'Unallowed import of `lodash`. Use `lodash/fp` instead');\n  }\n}\n\nconst create = function (context) {\n  const info = enhance();\n\n  return info.merge({\n    ImportDeclaration: function (node) {\n      reportIfLodashButNotFp(context, node, node.source.value);\n    },\n    CallExpression: function (node) {\n      if (astUtils.isStaticRequire(node)) {\n        reportIfLodashButNotFp(context, node, node.arguments[0].value);\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  create,\n  meta: {\n    docs: {\n      description: 'Use lodash/fp instead of Lodash.',\n      recommended: 'error'\n    }\n  }\n};\n"}